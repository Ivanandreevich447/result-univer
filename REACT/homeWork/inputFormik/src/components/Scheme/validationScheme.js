import * as yup from "yup";

//выношу схему отдельно
//	resolver: yupResolver(registrSchema), -  тут я ее добавлю в компоненте дальше

		const registrSchema = yup.object().shape({
			login: yup
				.string()
				.matches(
					/^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i,
					"неверный логин"
				) //регулярка
				.max(20, "должно быть не больше 20 символов")
				.min(3, "не верно, введи больше 3х символов")
				.required("обязательное поле"), // указывает на обязательное поле в форме

			password: yup
				.string()
				.max(20, "должно быть не больше 20 символов")
				.min(5, "не верно, введи больше 5 символов")
				.matches(
					/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{5,}$/,
					"пароль должен содержать буквы и цифры"
				)
				.required("обязательное поле"),

			repeatPassword: yup
				.string()
				.max(20, "неверный логин, должно быть не больше 20 символов")
				.min(5, "не верно, введи больше 5 символов")
				.matches(
					/^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{5,}$/,
					"пароль должен содержать буквы и цифры"
				)
				.required("повторите пароль")
				//чек на совпадение пароля/ .oneOf() - хотя бы 1поле совпадает с этим
				//для того,что пароль сравнить я и делал метод watch
				.oneOf([yup.ref("password")], "пароли не совпадают"),
		});


export default registrSchema;
