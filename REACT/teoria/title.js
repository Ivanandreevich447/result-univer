// В КОМПОНЕНТЕ МОЖНО СОЗДАТЬ ТОЛЬКО 1 ДИВ ЭЛЕМЕНТ - НО В НЕМ УЖЕ СКОЛЬКО УГОДНО ВНУТРИ

// НАЗВАНИЯ В БОЛЬШОЙ БУКВЫ И кемлКейс

// НЕ ЗАБЫВАТЬ ИМПОНТ-ЭКСКОПРТ

// В НОВОМ КОМПОНЕНТЕ - RSC - пропишет ЭЛЕМЕНТ С ЭКСПОРТОМ СРАЗУ ПО НАЗВАНИЮ ФАЙЛА
// ТАК ЖЕ ПРИ ДОБАВЛЕНИИ КОМПОНЕНТА КУДА-ТО - ПОСЛЕ СЛЕША / ТОЖЕ САМ ДОБАЛЯЕТ В ИМПОРТ ФАЙЛ

// ЕСЛИ ДОБАВЛЯЮ ,ДОПУСТИМ, ФУНКЦ В ВОЗРАТ В КОМПОНЕНТЕ - {имя элемента}

// передать style={{ margin: '10px' }}

// ВОЗВРАТ КОМПОНЕНТА ВСЕГДА В div должен быть или просто пустые скобки
//  <>  нащ код  </>

// В КОМПОНЕНТЕ МОЖЕМ ВЕРНУТЬ ПРОСТО return null;

// Функции, не использующие данные компонента, лучше определять вне функции компонента.

// В JSX все теги должны закрываться с помощью слэша. Сделать это можно либо вторым закрывающим тегом (</tag>), либо в виде самозакрывающегося тега (<tag />).

// 	Хук useState() принимает первым параметром начальное значение состояния и возвращает массив из двух элементов: текущее значение состояния и функцию для установки нового значения.
// Состояние и функцию для его обновления называют одинаково, но для функции в начало подставляется слово set и следующая буква пишется в верхнем регистре: state, setState(), value, setValue() и так далее.


//Иммутабельность — это свойство данных, которое означает, что они не могут быть мутированы после создания.
// Cостояние React-компонента должно быть иммутабельным, т. е. обновлять его можно исключительно с помощью специальной функции, после этого произойдет ререндер.

// Консистентность — это свойство системы или данных, которое гарантирует, что данные всегда будут находиться в целостном и согласованном состоянии без ошибок или противоречий.
// Состояние должно быть консистентным (единым везде, где только оно может использоваться).

//updateValue — это предыдущее состояние (value).

//Чтобы добавлять обработчики события на элемент в JSX, используются специальные атрибуты с названиями в camelCase вида onEvent (например, onClick). Их необходимо добавлять на сам элемент и передавать в фигурных скобках функцию-обработчик (не вызывая её).
// В React функция для обработки события принимает объект (event) с данными события, как и в JS, но за исключением того, что приходит объект не оригинального JS-события, а синтетического.
// Объекты событий в React являются синтетическими событиями, обёртками над оригинальными, которые позволяют обеспечить кросс-браузерность приложения.
// В состоянии React нельзя хранить функции.
// Актуальное значение состояния будет содержаться в переменной состояния только после следующего рендера компонента, а не сразу после вызова функции обновления.
// Если при обновлении состояния устанавливаемое значение вычисляется от предыдущего, то для получения актуального измененного значения в функцию обновления необходимо передать callback, принимающий предыдущее состояние и возвращающий обновленное:
// setValue(v => v + 1);
// setValue(v => v + 1);
// setValue(v => v + 1)


//Create React App из коробки поддерживает CSS-модули. Для того, чтобы подключить модуль, необходимо, чтобы CSS-файл оканчивался на .module.css вместо обычного .css, импортировать объект из данного файла в компонент: тут styles- это переменная ,как хотим можем назвать
//import styles from './MyComponent.module.css';

//и использовать имена классов из данного объекта внутри компонента вместо обычных имен классов:
// {/* <button className={styles.button}>Click me!</button> */}
