			//ENUM -  это специальная конструкция, которая позволяет создавать набор именованных значений, которые логически связаны между собой.
			//ПРИ КОМПИЛЯЦИИ В js - enum EnumRoles -создается функция -намного сложнее обработка - ОТ НЕГО ОТКАЗЫВАЕМСЯ

			//ЕСТЬ ЕЩЕ CONST ENUM -обработка их норм, они минимизируют код- при компиляции в js - удаляют не используемое значение и сам enum,оставляя только используемые значения
			//ТАМ ТОЛЬКО ЦИФРЫ И СТРОКИ- ДЛЯ ВСЕГО ОСТАЛЬНОГО -ОБЪЕКТ

//функция при создании js
enum EnumRoles {
	ADMIN, GUEST, USER
}

//будет намного проще для компиляции - задается просто число
const enum EnumColors {
	pink, black, ghreen
}

//создаю интерфейс ,где role и color: одному из значений,которые задал выше
interface IUser4 {
	role: EnumRoles
	color: EnumColors
}


const user6: IUser4 =  {
	role : EnumRoles.ADMIN,  //кроме заданных в EnumRoles - другогое не примет
	color : EnumColors.pink
}


//такая запись -могу менять /добавлять/разные типы писать внутри и конвертация в js- простая
const userO1:{name: string, age: number, car?: string} = {
	name: 'alex',
	age:29,
}
userO1.car = 'red' // добавил в обьект выше( там было не обязательное поле)
userO1.age = 20 // изменил поле


//тут перед {} знак = не надо, но внутри чрез него запись
enum userO2 {
	name = 'alex',
age = 29
}

//КОНСТАНТНЫЙ ЕНАМ
const enum userO3 {
	name = 'alex',
age = 22
}

//ДЛЯ ТАКИХ ЗАПИСЕЙ ХОРОШО ПОДХОДИТ, там покажет ошибки и отсальное удалит-содержит только строку и цифры
const enum ErrorInfo {
	ERROR = 500,
	NOT_FOUND = 404,
	SUCCESS = 200,
	min_lenght = 'минимальна длинна '

}
